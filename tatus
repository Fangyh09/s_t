[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 3b38caa..9a738a9 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -105,3 +105,10 @@[m [mvenv.bak/[m
 .vscode/[m
 venv/[m
 ray_results~/[m
[32m+[m[32mresults/[m
[32m+[m[32m*.npz[m
[32m+[m[32mElmo/[m
[32m+[m[32mray_result/[m
[32m+[m[32mrayresults/[m
[32m+[m[32mdata/[m
[32m+[m[32mdata[m
[1mdiff --git a/README.md b/README.md[m
[1mindex d01afb2..6da6de6 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -5,12 +5,13 @@[m
 [m
 ## Features[m
 [m
[31m-- [ ] ‰ΩøÁî®Elmo[m
[32m+[m[32m- [x] ‰ΩøÁî®Elmo[m
 - [ ] Â¢ûÂä†attention[m
 - [x] bie, bieoÊ†ºÂºèÔºåÂÖ∂‰ªñÊ†ºÂºè[m
 - [x] reverse Êñá‰ª∂[m
 - [x] checkÊñá‰ª∂[m
 - [x] cross validation[m
[32m+[m[32m- [x] Êèê‰∫§ÊµãËØï[m
 - [ ] shuffle[m
 - [ ] ÊµãËØïgru[m
 - [ ] Ë∑ëgithub‰ª£Á†Å[m
[1mdiff --git a/config.py b/config.py[m
[1mindex 4d40ea6..05a47eb 100644[m
[1m--- a/config.py[m
[1m+++ b/config.py[m
[36m@@ -4,6 +4,7 @@[m [mfrom model.data_utils import get_trimmed_glove_vectors, load_vocab, \[m
     get_processing_word[m
 from model.general_utils import get_logger[m
 [m
[32m+[m[32mimport numpy as np[m
 # import tensorflow as tf[m
 [m
 DEBUG_MODE = False[m
[36m@@ -56,6 +57,10 @@[m [mclass Config():[m
         self.embeddings = (get_trimmed_glove_vectors(self.filename_trimmed)[m
                 if self.use_pretrained else None)[m
 [m
[32m+[m[32m        # train_file =[m
[32m+[m[32m        # npzfile = np.load(train_file)[m
[32m+[m[32m        # self.train_embeddings =[m
[32m+[m
 [m
 [m
     # general config[m
[1mdiff --git a/model/ner_model.py b/model/ner_model.py[m
[1mindex bd25e1c..4ae63be 100644[m
[1m--- a/model/ner_model.py[m
[1m+++ b/model/ner_model.py[m
[36m@@ -263,9 +263,10 @@[m [mclass NERModel(BaseModel):[m
                     output = tf.reshape(output,[m
                                         shape=[s[0], s[1], 2 * self.config.hidden_size_char])[m
                     word_embeddings = tf.concat([word_embeddings, output], axis=-1)[m
[31m-        self.elmo_embedding = tf.reshape(self.elmo_embedding, shape=[s[0],[m
[31m-                                                                     s[1],[m
[31m-                                                                     1024 * 3])[m
[32m+[m[32m        self.elmo_embedding = tf.reshape(self.elmo_embedding, shape=[[m
[32m+[m[32m            tf.shape(word_embeddings)[0], tf.shape(word_embeddings)[1],[m
[32m+[m[32m            1024 * 3])[m
[32m+[m
         word_embeddings = tf.concat([word_embeddings, self.elmo_embedding], axis=-1)[m
         self.word_embeddings = tf.nn.dropout(word_embeddings, self.dropout)[m
 [m
[1mdiff --git a/train.py b/train.py[m
[1mindex 325d442..d240f3a 100644[m
[1m--- a/train.py[m
[1m+++ b/train.py[m
[36m@@ -188,9 +188,13 @@[m [mdef main2():[m
     import ray.tune as tune[m
 [m
     config = Config()[m
[31m-    # setattr(config, "dir_output", "")[m
[32m+[m[32m    setattr(config, "dir_output",[m
[32m+[m[32m            "rayresults/elmo/l=2_clip=5_rev=False_use_chars=False/")[m
[32m+[m[32m    # conf1 = {"lstm_layers": 2, "clip": 5}[m
     setattr(config, "nepochs", 100)[m
     setattr(config, "lstm_layers", 2)[m
[32m+[m[32m    setattr(config, "clip", 5)[m
[32m+[m[32m    setattr(config, "use_chars", False)[m
     # build model[m
     model = NERModel(config)[m
     model.build()[m
